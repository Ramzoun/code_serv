		 /*
         * // for simple html response
         * http.csrf().disable();
         */
         
    	// for REST End point
    	http.csrf().disable()
        .exceptionHandling()
        .authenticationEntryPoint(restAuthenticationEntryPoint);
    	
    	
    	
    	
    	 http.sessionManagement()
         .sessionCreationPolicy(SessionCreationPolicy.IF_REQUIRED);

 
        // The pages does not require login
        http.authorizeRequests().antMatchers("/", "/login", "/logout","/category/demo").permitAll();
 
        // /userInfo page requires login as ROLE_USER or ROLE_ADMIN.
        // If no login, it will redirect to /login page.
        http.authorizeRequests().antMatchers("/userInfo").access("hasAnyRole('ROLE_USER', 'ROLE_ADMIN')");
        http.authorizeRequests().antMatchers("/exam").access("hasAnyRole('ROLE_USER', 'ROLE_ADMIN')");
        http.authorizeRequests().antMatchers("/category/**").access("hasAnyRole('ROLE_USER', 'ROLE_ADMIN')");
        http.authorizeRequests().antMatchers("/res/**").access("hasAnyRole('ROLE_USER', 'ROLE_ADMIN')");
 
        // For ADMIN only.
        http.authorizeRequests().antMatchers("/admin").access("hasRole('ROLE_ADMIN')");
 
        // When the user has logged in as XX.
        // But access a page that requires role YY,
        // AccessDeniedException will be thrown.
        http.authorizeRequests().and().exceptionHandling().accessDeniedPage("/403");
 /*
        // Config for Login Form
        http.authorizeRequests().and().formLogin()//
                // Submit URL of login page.
                .loginProcessingUrl("/perform_login") // Submit URL
                .loginPage("/login")//
                .successHandler(mySuccessHandler)
                .failureHandler(myFailureHandler)
                //.defaultSuccessUrl("/userAccountInfo")//
                .failureUrl("/login?error=true")//
                .usernameParameter("username")//
                .passwordParameter("password")
                // Config for Logout Page
                .and().logout().logoutUrl("/logout").logoutSuccessUrl("/logoutSuccessful");
 */
        
        http.authorizeRequests()
        	.and()
        	.httpBasic()
        	.authenticationEntryPoint(restAuthenticationEntryPoint);

        //http.addFilterAfter(new CustomFilter(),BasicAuthenticationFilter.class);